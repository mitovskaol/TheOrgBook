#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of TheOrgBook environment.

  Usage: 
    $0 [options] [commands]

  Example:
    $0 -P -e test resetDatabase
    - This will reset the database in TheOrgBook's TEST environment.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default 
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    resetDatabase
      - Drop and recreate the database.
      - Rebuild search indexes.

    deleteDatabase
      - Deletes all databases off a pod and recycles the pod leaving it in a clean state.
      - Useful when database credentials change.

    hardReset
      - Delete the persistent indy wallet information.
      - Drop and recreate the database.
      - Rebuild search indexes.
      - Register the environment's DID with the ledger.

    resetSearchIndex
      - Delete and recreate the search index for a given environment.

    resetSolrCore
      - Delete and recreate the solr core for a given environment.

    rebuildSearchIndex
      - Rebuild the search index for a given environment.

    deleteWallets
      - Delete the local wallets from one or more pods.
        For example;
          $0 -e dev deleteWallets django

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp django

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown django

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle django

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;    
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  switchProject
  exitOnError

  dropAndRecreateDatabaseWithMigrations ${_apiPodName} ${_dbPodName}
  rebuildSearchIndex ${_apiPodName}

  echoWarning "\nThe project's database has been reset."
  echoWarning "You can now use the Permitify manage script to recycle the Permitify pods."  
}

deleteDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune all of the databases on ${_dbPodName} will be deleted.  All data will be lost."

  switchProject
  exitOnError

  deleteAndRecreateDatabase ${_dbPodName}

  echoWarning "\nThe databases on ${_dbPodName} have been deleted."
}

hardReset() {
  _apiPodName=${1}
  _dbPodName=${2}
  _walletDbPodName=${3}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ] || [ -z "${_walletDbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndWait "If you are using Permitify, use the Permitify manage script to reset the Permitify pods.\nWait for all of the pods to completely shut down before continuing."

  switchProject
  exitOnError

  # Delete any sqlite wallets from the API Pod ...
  deleteWallets ${_apiPodName}

  # Scale down the API pod ...
  scaleDown ${_apiPodName}
  exitOnError
  printAndWait "Wait for the ${_apiPodName} pod to completely shut down before continuing."

  # Drop and recreate the application database ...
  dropAndRecreatePostgreSqlDatabase ${_dbPodName}
  exitOnError

  # Drop the wallet databases ...
  if podExists ${_walletDbPodName}; then
    deleteAndRecreateDatabase ${_walletDbPodName}
    exitOnError
  fi

  # Bring the API pod back up ...
  scaleUp ${_apiPodName}
  exitOnError
  printAndWait "Wait for the ${_apiPodName} pod to completely start up before continuing."

  rebuildSearchIndex ${_apiPodName}

  printAndWait "If you are resetting the ledger, wait for the ledger to completely start up before continuing."

  echoWarning "\nThe project's database and indy wallets have been reset."  
  echoWarning "If you are using Permitify, you can now use the Permitify manage script to scale the Permitify pods up."  
}

resetSearchIndex() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echo -e \\n"resetSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  deleteSearchIndex "${_solrPodName}"

  recyclePods "${_solrPodName}"
  printAndWait "Wait for the ${_solrPodName} pod to completely start up before continuing."

  rebuildSearchIndex "${_apiPodName}"
}

resetSolrCore() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echo -e \\n"resetSolrCore; Missing parameter!"\\n
    exit 1
  fi

  deleteSolrCore "${_solrPodName}"

  recyclePods "${_solrPodName}"
  printAndWait "Wait for the ${_solrPodName} pod to completely start up before continuing."

  rebuildSearchIndex "${_apiPodName}"
}

deleteSolrCore() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echo -e \\n"deleteSolrCore; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the Solr core on ${_solrPodName} will be deleted."
  deleteFromPod "${_solrPodName}" "/opt/solr/server/solr/mycores/the_org_book"
  exitOnError
}

deleteSearchIndex() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echo -e \\n"deleteSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the search index on ${_solrPodName} will be deleted."
  deleteFromPod "${_solrPodName}" "/opt/solr/server/solr/mycores/the_org_book/data/index"
  exitOnError
}

rebuildSearchIndex() {
  _apiPodName=${1}
  if [ -z "${_apiPodName}" ]; then
    echo -e \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi
  echoWarning "\nRebuilding the search index ..."
  echoWarning "The command may start interactively in the pod.  Please answer 'y' to the question if you are prompted."
  runInContainerInteractively ${_apiPodName} './rebuildSearchIndex.sh'
  exitOnError
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-django}
    dbPodName=${2:-postgresql}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  deletedatabase)
    dbPodName=${1}
    deleteDatabase "${dbPodName}"
    ;;
  hardreset)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-django}
    dbPodName=${2:-postgresql}
    walletDbPodName=${3:-wallet-db}
    hardReset "${apiPodName}" "${dbPodName}" "${walletDbPodName}"
    ;;
  resetsearchindex)
    apiPodName=${1:-django}
    solrPodName=${2:-solr}
    switchProject
    exitOnError
    resetSearchIndex "${apiPodName}" "${solrPodName}"
    ;;
  resetsolrcore)
    apiPodName=${1:-django}
    solrPodName=${2:-solr}
    switchProject
    exitOnError
    resetSolrCore "${apiPodName}" "${solrPodName}"
    ;;
  rebuildsearchindex)
    apiPodName=${1:-django}
    switchProject
    exitOnError
    rebuildSearchIndex "${apiPodName}"
    ;;
  deletewallets)
    deleteWallets ${@}
    recyclePods ${@}
    ;;
  scaleup)
    scaleUp ${@}
    ;;
  scaledown)
    scaleDown ${@}
    ;;
  recycle)
    recyclePods ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null